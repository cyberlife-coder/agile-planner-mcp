/**
 * Module de validation des backlogs - Strat√©gie sp√©cifique
 * @module backlog-validator
 */

const chalk = require('chalk');
const { SchemaValidatorStrategy } = require('./schema-validator-strategy');
const { EpicValidator } = require('./epic-validator');
const { UserStoryValidator } = require('./user-story-validator');

/**
 * Classe sp√©cialis√©e pour la validation des backlogs
 * Impl√©mente le pattern Strategy avec une strat√©gie sp√©cifique
 */
class BacklogValidator extends SchemaValidatorStrategy {
  /**
   * Cr√©e une instance de BacklogValidator
   */
  constructor() {
    super();
    this.epicValidator = new EpicValidator();
    this.userStoryValidator = new UserStoryValidator();
    this.schema = this.createBacklogSchema();
  }

  /**
   * Cr√©e le sch√©ma pour un backlog
   * @returns {Object} Sch√©ma pour un backlog
   */
  createBacklogSchema() {
    return {
      required: ['projectName', 'epics'],
      properties: {
        projectName: { type: 'string' },
        description: { type: 'string' },
        epics: {
          type: 'array',
          items: this.epicValidator.schema
        },
        mvp: {
          type: 'array',
          items: {
            required: ['id'],
            properties: {
              id: { type: 'string' },
              title: { type: 'string' }
            }
          }
        },
        iterations: {
          type: 'array',
          items: {
            required: ['name', 'stories'],
            properties: {
              name: { type: 'string' },
              description: { type: 'string' },
              stories: {
                type: 'array',
                items: {
                  required: ['id'],
                  properties: {
                    id: { type: 'string' },
                    title: { type: 'string' }
                  }
                }
              }
            }
          }
        }
      }
    };
  }

  /**
   * Valide un backlog complet
   * @param {Object} backlog - Backlog √† valider
   * @returns {Object} R√©sultat de validation {valid, errors?}
   */
  validate(backlog) {
    // Extraire les donn√©es si elles sont dans un wrapper
    const extractedBacklog = this.extractData(backlog);
    
    if (!extractedBacklog) {
      return { valid: false, errors: ['Donn√©es du backlog invalides ou manquantes'] };
    }
    
    // Log pour debug
    console.log(`Validation du backlog ${extractedBacklog.projectName || 'sans nom'}`);

    // V√©rification de la structure de base du backlog
    const baseResult = this.validateAgainstSchema(extractedBacklog, this.schema);
    if (!baseResult.valid) {
      return baseResult;
    }

    // Validation des composants d√©taill√©s
    const errors = [];
    
    // Validation des epics (obligatoires)
    if (!extractedBacklog.epics || !Array.isArray(extractedBacklog.epics)) {
      errors.push('La section epics doit √™tre un tableau non vide');
      return { valid: false, errors };
    }

    // Validation de chaque epic
    for (let i = 0; i < extractedBacklog.epics.length; i++) {
      const epic = extractedBacklog.epics[i];
      
      // V√©rification manuelle de l'ID pour correspondre aux attentes des tests
      if (!epic.id) {
        errors.push(`id est requis √† /epics[${i}]`);
      }
      
      // V√©rification du titre
      if (!epic.title) {
        errors.push(`title est requis √† /epics[${i}]`);
      }
    }
    
    // Validation du MVP si pr√©sent
    if (extractedBacklog.mvp) {
      if (!Array.isArray(extractedBacklog.mvp)) {
        errors.push('La section MVP doit √™tre un tableau');
      } else {
        // V√©rification de chaque user story du MVP
        for (const story of extractedBacklog.mvp) {
          if (!story.id || !story.title) {
            errors.push('Une user story du MVP doit avoir un ID et un titre');
            break;
          }
        }
      }
    }
    
    // Validation des iterations si pr√©sentes
    if (extractedBacklog.iterations) {
      if (!Array.isArray(extractedBacklog.iterations)) {
        errors.push('La section iterations doit √™tre un tableau');
      } else {
        // V√©rification de chaque it√©ration
        for (const iteration of extractedBacklog.iterations) {
          if (!iteration.name) {
            errors.push(`name est requis √† /iterations`);
            continue;
          }
          
          if (!iteration.stories || !Array.isArray(iteration.stories)) {
            errors.push(`stories doit √™tre un tableau √† /iterations`);
            continue;
          }
          
          // V√©rification de chaque user story de l'it√©ration
          for (const story of iteration.stories) {
            if (!story.id || !story.title) {
              errors.push(`Une user story de l'it√©ration ${iteration.name} doit avoir un ID et un titre`);
              break;
            }
          }
        }
      }
    }
    
    if (errors.length > 0) {
      return { valid: false, errors };
    }
    
    return { valid: true };
  }

  /**
   * M√©thode fa√ßade pour valider un backlog
   * @param {Object} backlog - Backlog √† valider
   * @returns {Object} R√©sultat de la validation {valid, error?}
   */
  validateBacklog(backlog) {
    console.log(chalk.blue('üîç Validation du backlog...'));
    
    try {
      const result = this.validate(backlog);
      
      if (result.valid) {
        console.log(chalk.green('‚úì Backlog valide'));
      } else {
        console.log(chalk.red('‚ö†Ô∏è Backlog invalide:'));
        result.errors.forEach(error => console.log(chalk.yellow(`  - ${error}`)));
      }
      
      return result;
    } catch (error) {
      console.error(chalk.red('‚ùå Erreur lors de la validation du backlog:'), error);
      return { 
        valid: false, 
        error: `Erreur inattendue: ${error.message || 'Erreur inconnue'}` 
      };
    }
  }
}

module.exports = { BacklogValidator };
