/**
 * Module de compatibilit√© pour la g√©n√©ration de fichiers markdown
 * Redirige vers la nouvelle architecture modulaire
 * @module markdown-generator
 */

const path = require('path');
const fs = require('fs-extra');
const chalk = require('chalk');

console.log(chalk.yellow('üîç Chargement du module markdown-generator.js de compatibilit√©'));

// Importer le nouveau module fa√ßade
const { 
  generateMarkdownFilesFromResult,
  formatUserStory,
  createMarkdownGenerator
} = require('./markdown/index');

console.log(chalk.green('‚úÖ Module fa√ßade import√© avec succ√®s'));

/**
 * G√©n√®re les fichiers markdown pour une feature
 * @param {Object} feature - La feature √† formater
 * @param {string} outputDir - R√©pertoire de sortie
 * @returns {Promise<Object>} - R√©sultat de la g√©n√©ration
 */
const generateFeatureMarkdown = async (feature, outputDir) => {
  console.log(chalk.blue('üî† Generating feature markdown using refactored architecture...'));
  
  // Acc√©der correctement √† la structure de donn√©es
  const featureData = feature.feature || feature;
  const title = featureData.title || 'Feature sans titre';
  const description = featureData.description || '';
  
  console.log(chalk.yellow(`Feature re√ßue: "${title}"`));
  console.log(chalk.yellow(`R√©pertoire de sortie: ${outputDir}`));
  
  // Adapter l'appel √† la nouvelle architecture
  const result = {
    project: { title: title, description: description },
    epics: [{
      title: 'Feature Epic',
      description: description,
      features: [featureData]
    }]
  };
  
  console.log(chalk.yellow(`Structure adapt√©e cr√©√©e pour la feature "${title}"`));
  
  try {
    const genResult = await generateMarkdownFilesFromResult(result, outputDir);
    console.log(chalk.green(`‚úÖ Markdown g√©n√©r√© avec succ√®s dans ${outputDir}`));
    return genResult;
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de la g√©n√©ration du markdown: ${error.message}`));
    console.error(chalk.red(error.stack));
    throw error;
  }
};

/**
 * D√©termine la structure de donn√©es √† utiliser pour le traitement
 * @param {Object} backlog - Backlog √† analyser
 * @returns {Object} - Structure de donn√©es √† traiter
 */
function determineBacklogStructure(backlog) {
  if (!backlog) {
    console.error(chalk.red(`‚ùå Structure de backlog invalide`));
    throw new Error('Structure de backlog invalide ou manquante');
  }
  
  // Structure {success: true, result: {...}}
  if (backlog.success && backlog.result) {
    console.log(chalk.yellow(`Utilisation de backlog.result pour le traitement`));
    return backlog.result;
  }
  
  // Structure directe contenant project
  if (backlog.project) {
    console.log(chalk.yellow(`Utilisation directe du backlog pour le traitement`));
    return backlog;
  }
  
  // Structure {result: {project: ...}}
  if (backlog.result?.project) {
    console.log(chalk.yellow(`Utilisation de backlog.result qui contient project`));
    return backlog.result;
  }
  
  // Format inconnu mais objet pr√©sent - tenter une conversion
  console.log(chalk.yellow(`Conversion d'une structure inconnue en un format compatible`));
  return {
    project: {
      title: backlog.name || backlog.title || 'Projet sans titre',
      description: backlog.description || ''
    },
    epics: backlog.epics || [],
    iterations: backlog.iterations || [],
    mvp: backlog.mvp || null
  };
}

/**
 * Alias de generateMarkdownFilesFromResult pour la compatibilit√©
 * @param {Object} backlog - Le backlog √† formater
 * @param {string} outputDir - R√©pertoire de sortie
 * @returns {Promise<Object>} - R√©sultat de la g√©n√©ration
 */
const generateMarkdownFiles = async (backlog, outputDir) => {
  console.log(chalk.blue('üî† Generating markdown files using refactored architecture...'));
  
  // Debug des donn√©es re√ßues
  console.log(chalk.yellow(`Structure du backlog re√ßu : ${typeof backlog === 'object' ? 'Objet' : typeof backlog}`));
  console.log(chalk.yellow(`Backlog a success: ${backlog?.success ? 'Oui' : 'Non'}`));
  console.log(chalk.yellow(`Backlog a result: ${backlog?.result ? 'Oui' : 'Non'}`));
  
  // D√©terminer la structure √† traiter
  let dataToProcess = determineBacklogStructure(backlog);
  
  console.log(chalk.yellow(`R√©pertoire de sortie: ${outputDir}`));
  
  try {
    // V√©rifier la structure minimale requise
    if (!dataToProcess.project) {
      dataToProcess.project = { title: 'Projet g√©n√©r√©', description: 'Projet g√©n√©r√© automatiquement' };
    }
    
    if (!dataToProcess.project.title) {
      dataToProcess.project.title = 'Projet sans titre';
    }
    
    const genResult = await generateMarkdownFilesFromResult(dataToProcess, outputDir);
    console.log(chalk.green(`‚úÖ Markdown g√©n√©r√© avec succ√®s dans ${outputDir}`));
    return genResult;
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de la g√©n√©ration du markdown: ${error.message}`));
    console.error(chalk.red(error.stack));
    throw error;
  }
};

// Constantes pour la compatibilit√©
const epicFileInstructions = `Ce document est g√©n√©r√© par Agile Planner et contient des informations sur un Epic.
Les User Stories associ√©es se trouvent dans les sous-dossiers.
Vous pouvez explorer le backlog complet en naviguant dans les liens.`;

const featureFileInstructions = `Ce document est g√©n√©r√© par Agile Planner et contient des informations sur une Feature.
Les User Stories associ√©es se trouvent dans les sous-dossiers.
Vous pouvez explorer le backlog complet en naviguant dans les liens.`;

const userStoryFileInstructions = `Ce document est g√©n√©r√© par Agile Planner et contient des informations sur une User Story.
Consultez les sections Acceptance Criteria et Technical Tasks pour comprendre les exigences.`;

const iterationFileInstructions = `Ce document est g√©n√©r√© par Agile Planner et contient des informations sur une It√©ration.
Il liste les User Stories √† compl√©ter dans cette it√©ration.
Vous pouvez acc√©der aux User Stories en cliquant sur les liens.`;

const mvpFileInstructions = `Ce document est g√©n√©r√© par Agile Planner et d√©finit le Minimum Viable Product (MVP).
Il regroupe les User Stories essentielles pour une premi√®re version fonctionnelle.
Vous pouvez acc√©der aux User Stories en cliquant sur les liens.`;

// R√©exporter les fonctions et constantes pour maintenir la compatibilit√© API
module.exports = {
  generateMarkdownFilesFromResult,
  formatUserStory,
  createMarkdownGenerator,
  generateFeatureMarkdown,
  generateMarkdownFiles,
  epicFileInstructions,
  featureFileInstructions,
  userStoryFileInstructions,
  iterationFileInstructions,
  mvpFileInstructions,
  // Utiliser createSlug depuis le module utils plut√¥t que de red√©finir la fonction ici
  createSlug: require('./markdown/utils').createSlug
};

console.log(chalk.green('‚úÖ Module markdown-generator.js de compatibilit√© export√© avec succ√®s'));
