// Test simplifiÃ© isolÃ© pour mieux comprendre le problÃ¨me
const fs = require('fs-extra');
const path = require('path');

// Charger le mÃªme backlog que dans les tests originaux
const sampleBacklog = JSON.parse(
  fs.readFileSync(path.join(__dirname, 'fixtures', 'sample-backlog.json'), 'utf8')
);

// Fonction ultra-simplifiÃ©e pour le formatage des user stories
function simpleFormatUserStory(userStory) {
  return [
    `# User Story ${userStory.id}: ${userStory.title}`,
    '',
    '## Description',
    `- [ ] ${userStory.description}`,
    '',
    '### Acceptance Criteria',
    ...userStory.acceptance_criteria.map(criteria => `- [ ] ${criteria}`),
    '',
    '### Technical Tasks',
    ...userStory.tasks.map(task => `- [ ] ${task}`),
    '',
    `**Priority:** ${userStory.priority}`,
    userStory.dependencies && userStory.dependencies.length > 0 ? 
      `**Dependencies:** ${userStory.dependencies.join(', ')}` : '',
    '',
    '## ðŸ¤– User Story Instructions for AI',
    '',
    'Lorsque vous travaillez avec cette User Story:',
    '- Mettez Ã  jour le statut des tÃ¢ches en remplaÃ§ant [ ] par [x] lorsqu\'elles sont terminÃ©es',
    '- Mettez Ã  jour le statut des critÃ¨res d\'acceptation en remplaÃ§ant [ ] par [x] lorsqu\'ils sont validÃ©s',
    '- VÃ©rifiez les liens vers la feature parent et les dÃ©pendances avant de commencer',
    '- Ne modifiez PAS la structure existante du document',
    '',
    'Exemple de mise Ã  jour:',
    '- [ ] TÃ¢che Ã  faire  â†’  - [x] TÃ¢che terminÃ©e',
    '',
    '---'
  ].join('\n');
}

// Test simple et isolÃ©
describe('Simple Markdown Format', () => {
  test('Formats user story correctly with all expected elements', () => {
    const story = sampleBacklog.mvp[0];
    const formatted = simpleFormatUserStory(story);
    
    // VÃ©rifier tous les Ã©lÃ©ments attendus
    expect(formatted).toContain(`# User Story ${story.id}: ${story.title}`);
    expect(formatted).toContain(`- [ ] ${story.description}`);
    expect(formatted).toContain('### Acceptance Criteria');
    expect(formatted).toContain('### Technical Tasks');
    
    // VÃ©rifier les critÃ¨res d'acceptation
    story.acceptance_criteria.forEach(criteria => {
      expect(formatted).toContain(`- [ ] ${criteria}`);
    });
    
    // VÃ©rifier les tÃ¢ches
    story.tasks.forEach(task => {
      expect(formatted).toContain(`- [ ] ${task}`);
    });
    
    // VÃ©rifier la prioritÃ©
    expect(formatted).toContain(`**Priority:** ${story.priority}`);
    
    // VÃ©rifier les instructions AI
    expect(formatted).toContain('ðŸ¤–');
    expect(formatted).toContain('User Story Instructions for AI');
  });
});
