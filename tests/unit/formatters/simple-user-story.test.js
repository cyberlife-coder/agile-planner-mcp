/**
 * Test compl√®tement isol√© pour l'utilitaire de formatage des user stories
 * Conform√©ment √† TDD Wave 8 : Isolation stricte et correction des chemins d'import
 * R√©solution du probl√®me d'import et simplification du test
 */
const { testFormat } = require('../../utils/mdformatter');
const fs = require('fs-extra');
const path = require('path');

// D√©finir un sample de user story directement dans le test pour √©viter les probl√®mes de fixtures
const sampleStory = {
  id: "US001",
  title: "Authentification utilisateur",
  description: "En tant qu'utilisateur, je veux pouvoir m'authentifier afin d'acc√©der √† mon compte",
  acceptance_criteria: [
    "L'utilisateur peut s'authentifier avec email/mot de passe",
    "L'authentification √©choue avec des identifiants incorrects",
    "L'utilisateur re√ßoit un message d'erreur explicite en cas d'√©chec"
  ],
  tasks: [
    "Cr√©er le formulaire d'authentification",
    "Impl√©menter la validation c√¥t√© client",
    "Impl√©menter la logique d'authentification c√¥t√© serveur",
    "Ajouter des tests unitaires et d'int√©gration"
  ],
  priority: "Haute",
  dependencies: ["US002", "US003"]
};


// Mock pour fs-extra (simplifi√© conform√©ment √† TDD Wave 8)
jest.mock('fs-extra', () => ({
  writeFileSync: jest.fn()
}));

// Mock pour path (simplifi√© conform√©ment √† TDD Wave 8)
jest.mock('path', () => ({
  join: jest.fn((...args) => args.join('/'))
}));

describe('User Story Markdown Formatting', () => {
  // Conforme √† TDD Wave 8 - Test simplifi√© et robuste
  test('Formats user story correctly in markdown with checkboxes', () => {
    // Utiliser notre story d'exemple directement d√©finie dans le test
    const formatted = testFormat(sampleStory);
    
    // V√©rifier tous les √©l√©ments requis par le test original
    expect(formatted).toContain(`# User Story ${sampleStory.id}: ${sampleStory.title}`);
    expect(formatted).toContain(`- [ ] ${sampleStory.description}`);
    expect(formatted).toContain('### Acceptance Criteria');
    expect(formatted).toContain('### Technical Tasks');
    
    // V√©rifier chaque crit√®re d'acceptation
    sampleStory.acceptance_criteria.forEach(criteria => {
      expect(formatted).toContain(`- [ ] ${criteria}`);
    });
    
    // V√©rifier chaque t√¢che
    sampleStory.tasks.forEach(task => {
      expect(formatted).toContain(`- [ ] ${task}`);
    });
    
    // V√©rifier la priorit√©
    expect(formatted).toContain(`**Priority:** ${sampleStory.priority}`);
    
    // V√©rifier les instructions pour l'IA
    expect(formatted).toContain('ü§ñ');
    expect(formatted).toContain('User Story Instructions for AI');
    
    // Optionnel: √âcrire le r√©sultat dans un fichier pour inspection
    // fs.writeFileSync(path.join(__dirname, 'user-story-test-output.md'), formatted);
    
    // Un test conforme √† TDD Wave 8 doit v√©rifier le formattage sans cr√©er de fichiers
    // Ce qui rend le test plus isol√© et moins d√©pendant de l'environnement
  });
});
