{
  "epic": {
    "title": "Library Management System",
    "description": "Create a complete system allowing librarians to manage book inventory, loans and members, while offering users search and reservation features."
  },
  "mvp": [
    {
      "id": "US001",
      "title": "User Registration",
      "description": "As a user, I want to be able to register for the system, in order to access library services.",
      "acceptance_criteria": [
        "GIVEN a user visits the registration form, WHEN they correctly complete all required fields, THEN an account is created for this user",
        "GIVEN a user fills out the registration form, WHEN they enter an email that is already in use, THEN the system displays an appropriate error message"
      ],
      "tasks": [
        "Create the data model for users",
        "Implement the registration form with validation",
        "Set up email and password authentication",
        "Create unit tests for form validation"
      ]
    },
    {
      "id": "US002",
      "title": "Book Search",
      "description": "As a user, I want to be able to search for books by title, author, or category, in order to quickly find the books I'm interested in.",
      "acceptance_criteria": [
        "GIVEN a user is on the search page, WHEN they enter a search term, THEN the system displays all matching books",
        "GIVEN search results are displayed, WHEN the user uses the filters, THEN the results are updated accordingly"
      ],
      "tasks": [
        "Create the search index for books",
        "Implement search interface with filters",
        "Optimize search query performance",
        "Add result pagination"
      ]
    }
  ],
  "iterations": [
    {
      "name": "Iteration 1",
      "stories": [
        {
          "id": "US003",
          "title": "Loan Management",
          "description": "As a librarian, I want to be able to record book loans and returns, in order to track the circulation of books.",
          "acceptance_criteria": [
            "GIVEN a book is available, WHEN the librarian records a loan, THEN the book status is updated",
            "GIVEN a book is on loan, WHEN the user returns it, THEN the system records the return date and updates the status"
          ],
          "tasks": [
            "Create the data model for loans",
            "Implement the loan recording interface",
            "Add functionality to calculate late fees",
            "Set up automatic notifications for books due to be returned"
          ]
        }
      ]
    },
    {
      "name": "Iteration 2",
      "stories": [
        {
          "id": "US004",
          "title": "Book Reservation",
          "description": "As a user, I want to be able to reserve a book that is already on loan, in order to be notified when it becomes available.",
          "acceptance_criteria": [
            "GIVEN a book is on loan, WHEN a user reserves it, THEN a notification is sent when the book is returned",
            "GIVEN a book has multiple reservations, WHEN it is returned, THEN users are notified in the order of reservations"
          ],
          "tasks": [
            "Create the reservation system",
            "Implement the queue for reservations",
            "Add the notification system",
            "Set up integration tests"
          ]
        }
      ]
    }
  ]
}
